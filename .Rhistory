#Kahekili.03m    165   0  65   0 246   0 365  12   0   0
#Kahekili.07m    245   0  11   0 513   0 354  24   0   0
#KanahenaBay.03m  25   0 118   0 153   0  76  26   0 220
#KanahenaPt.03m    0   0  29   0   0  22   5  27   0  39
#KanahenaPt.10m    7   0  36   0 244  25   0   3 159 106
#Molokini.07m    144   0 192   0 367   0 323  15   0  28
#Molokini.13m    194   0 139   8 137   0  45  21   0  13
#Olowalu.03m     400   0  42   0 355 241 246  11   0   0
#Olowalu.07m     260   0 373   0   0   0  29  37   0   0
#Papaula.03m       4 386  25   0   0   0 130   6   0   0
#Puamana.03m     275   0  33   0  95   6 276 204   0   0
#Puamana.13m      19   0   2   0 381   0  89  12   0   0
#exclude transects with fewer than 20 growth observations
MCi2<-data[data$species=="MC" & data$site!="KanahenaBay"  & data$site!="KanahenaPt" & data$utrans!="Papaula.03m" & data$utrans!="Puamana.13m",]
MCi2$utrans<-factor(MCi2$utrans)
MCi2$site<-factor(MCi2$site)
MCi2$uquad<-factor(MCi2$uquad)
#create a variable:  spcoverD = spcover_t-average transect cover over years and quads
attach(MCi2)
coverTQY <- tapply(spcover,list(utrans,uquad,year),mean,na.rm=T)
coverT <- rowMeans(coverTQY,na.rm=T)
MCi2$spcoverD<-(spcover-coverT[as.character(utrans)])/coverT[as.character(utrans)]
detach(MCi2)
MC<-MCi2
#Need this centered variable later
#MC$csize <- MC$size-mean(MC$size,na.rm=TRUE)
MCg<-subset(MC,fate=="growth"|fate=="fuseLG"|fate=="fissLG")
amc={};
for (i in 1:length(MCg)) {
if (!(sum(is.na(MCg[i]))>0)) {
amc<-c(amc,i);
#str(MCa[i])
}
}
MCg<-droplevels(MCg[,amc])
MCg<-droplevels(MCg)
MCf<-subset(MC,fateIPM=="fissLG"|fateIPM=="M")
xtabs(~numfiss,MCf)
index<-c(1,2,3,4,5,6,7,10)
values<-c("one","two","three",">three",">three",">three",">three",">three")
MCf$fnumfiss<-values[match(MCf$numfiss,index)]
values<-c("one","two","three","four","five","six","seven","ten")
MCf$fnumfiss2<-values[match(MCf$numfiss,index)]
MCf$fnumfiss<-as.factor(MCf$fnumfiss)
MCf$fnumfiss2<-as.factor(MCf$fnumfiss2)
xtabs(~fnumfiss,MCf)
MCf<-droplevels(MCf)
MCfs<-subset(MC,fateIPM=="fissSM")
MCfs<-droplevels(MCfs)
#For recruit size, exclude all but recruits
MCrs <- subset(MC,MC$fate_t=="R")
#################################################
#Data for Recruitment
library(gdata)
#Use alldata.txt (just a list of colonies and sizes with photoquad info) to get the recruit info
rawdata<-data<- read.delim("alldata_28Mar2013.txt")
rawdata$site<-sitetable[charmatch(rawdata$sitename,sitenametable)]
rawdata$site<-factor(rawdata$site)
rawdata$quad<-factor(paste("Q",rawdata$quad,sep=""))
#create transect names just like for sortdata->data
rawdata$trans <- as.character(rawdata$depthname)
rawdata <- within(rawdata,trans[sitename=="HonS"]<-"S")
rawdata <- within(rawdata,trans[sitename=="HonN"]<-"N")
rawdata$trans <-factor(rawdata$trans)
#create unique names for transect, quad, and colony just like for sortdata->data
rawdata$utrans<-factor(paste(rawdata$site,rawdata$trans,sep="."))
rawdata$uquad <-factor(paste(rawdata$utrans,rawdata$quad,sep="."))
rawdata$uyear <-factor(paste(rawdata$utrans,rawdata$quad,rawdata$year_t,sep="."))
rawdata$tyear <-factor(paste(rawdata$utrans,rawdata$year_t,sep="."))
#check for missing quads
#checking with MR, but for now
#No Data for Papaula 03m Q2 2003, Puamana 13m Q1 (exclude 2004 and 2005; earlier years missing), Puamana.13m.Q5.2001
#Puamana 13m Q4 does not exist for all years,
table(rawdata$uquad,rawdata$year_t)
RFtab<-xtabs(fate_t=="R"~uyear+species,rawdata,drop.unused.levels=FALSE)
RF<-as.data.frame(RFtab)
#RF <- RF[(RF$uyear != "Papaula.03m.Q2.2003" & RF$uyear != "Puamana.13m.Q5.2001"),]
#RF <- RF[(RF$uyear != "Puamana.13m.Q1.2004"& RF$uyear != "Puamana.13m.Q1.2005"),]
#RF <- RF[(RF$uyear != "Papaula.03m.Q2.2003" & RF$uyear != "Puamana.13m.Q5.2001"),]
a<-unlist(strsplit(as.character(RF$uyear),"\\."))
newcol<-matrix(a,ncol=4,byrow=TRUE)
RF<-cbind(RF,newcol)
RF$utrans<-paste(RF[,4],RF[,5])
RF$quad<-RF[,6]
RF$year<-RF[,7]
RF<-subset(RF,select=c(1,2,3,8,9,10))
RF$year<-as.factor(RF$year)
RF$species<-as.factor(RF$species)
RF$utrans<-as.factor(RF$utrans)
RF$quad<-as.factor(RF$quad)
#create density variable
spcoverlookup <- as.data.frame.table(tapply(rawdata$area_t,list(rawdata$uyear,rawdata$species),sum,na.rm=TRUE))
spcoverlookup$Freq[is.na(spcoverlookup$Freq)] <- 0  #these NAs indicated that none of that species was present, so it's a zero
allcoverlookup <- as.data.frame.table(tapply(rawdata$area_t,list(rawdata$uyear),sum,na.rm=TRUE))
RF$allcover_t <- allcoverlookup$Freq[allcoverlookup$Var1==as.character(RF$uyear)]
RF$spcover_t <- spcoverlookup$Freq
RF <- rename.vars(RF,from="Freq",to="recruits")
table(RF$utrans,RF$year)
#OK, looking at this table, we can see that we have the correct number of observations in each quad/year:
#Missing Quads:
#KanP 03m Q2 in 2004, 2005 (blank log and layer files)
#Papa 03m Q2 in 2003, 2004 (missing output file)
#Puam 13m Q1 in all years (blank log and layer files)
#Puam 13m Q4 in 1999-2003 (blank log and layer files)
#Puam 13m Q5 in 2001      (missing photo file)
#For these observations, zeros are real zeros.
#This approach includes the two year transitions, which I think is ok b/c obs are so low.
#   this really only effects Honolua (for all three spp) and Papaula.03m for PL.
#Remember to exclude the first year of observation  b/c those are false zeros -- all "N" fates
#   1st years:  1999(HonN,HonS,Olow,Papa,Puam), 2000(Molo), 2001 (Kahe,Kana)
# exclude the first photos from each site in appropriate year -- all NEW;
RF <-subset(RF,!(year==1999))
RF <-subset(RF,!(year==2000 & (utrans=="Molokini 07m" | utrans=="Molokini 13m")))
RF <-subset(RF,!(year==2001 & (utrans=="KanahenaBay 03m" | utrans=="KanahenaPt 03m" | utrans=="KanahenaPt 10m" | utrans=="Kahekili 03m" | utrans=="Kahekili 07m")))
table(RF$utrans,RF$year)
RFMC <- droplevels(subset(RF,RF$species=="MC"))
RFPC <- droplevels(subset(RF,RF$species=="PC"))
RFPL <- droplevels(subset(RF,RF$species=="PL"))
#For the IPM, subset to species, and only look at sites where there are enough observations to measure growth, surv, and fission, too
MCr <- droplevels(subset(RF,RF$species=="MC" & (RF$utrans!="KanahenaBay 03m" & RF$utrans!="KanahenaPt 03m"& RF$utrans!="KanahenaPt 10m"& RF$utrans!="Papaula 03m" & RF$utrans!="Puamana 13m")))
#MCr <- droplevels(subset(RF,RF$species=="MC" & (RF$utrans!="KanahenaBay 03m" & RF$utrans!="Honolua.S" & RF$utrans!="KanahenaPt 03m"& RF$utrans!="KanahenaPt 10m"& RF$utrans!="Papaula 03m" & RF$utrans!="Puamana 13m")))
PLr <- droplevels(subset(RF,RF$species=="PL" & (RF$utrans!="KanahenaPt 10m" & RF$utrans!="KanahenaPt 03m" & RF$utrans!="Olowalu 07m")))
PCr <- droplevels(subset(RF,RF$species=="PC" & (RF$utrans!="Honolua S" & RF$utrans!="KanahenaPt 03m"  & RF$utrans!="Olowalu 07m" & RF$utrans!="Papaula 03m")))
##########################################################################
#Data for Density
MCds<-subset(MC,fateIPM!="recruit"&fateIPM!="fissSM")
MCds<-droplevels(MCds)
MCd<-xtabs(~uyear,MCds)
MCd<-as.data.frame(MCd)
MCd$uyear<-as.character(MCd$uyear)
temp<-matrix(nrow=190,ncol=4)
for (i in 1:190){
temp[i,]<-unlist(strsplit(MCd[i,1],"[.]"))
}
for(i in 1:190){
temp2<-paste(temp[,1],temp[,2])
}
MCd<-cbind(MCd,temp2,temp[,3],temp[,4])
colnames(MCd)<-c("uyear","colnum","utrans","quad","year")
###################################################################
MCf$hilo<-ifelse(MCf$numfiss<4,"lo","hi")
MCf$hilo<-as.factor(MCf$hilo)
hinum<-subset(MCf,MCf$numfiss>3)
lonum<-subset(MCf,MCf$numfiss<4)
MCf$Philo<-ifelse(MCf$hilo=="lo",1,0)
MCg$sizediff<-(MCg$sizeNext-MCg$size)
growthonly<-subset(MCg,MCg$fateIPM=="growth")
dl<-qnorm(0.05,mean(growthonly$sizediff),sd(growthonly$sizediff))
growthonly$ES<-ifelse(growthonly$sizediff<dl,"ES","NGS")
growthonly$ES<-as.factor(growthonly$ES)
GONGS<-subset(growthonly,growthonly$ES=="NGS")
GOES<-subset(growthonly,growthonly$ES=="ES")
index<-c("ES","NGS")
values<-c(1,0)
growthonly$PES<-values[match(growthonly$ES,index)]
fissonly<-subset(MCg,MCg$fateIPM=="fissLG")
fuseonly<-subset(MCg,MCg$fateIPM=="fuseLG"|MCg$fateIPM=="M")
################################MeganR IPM Kernel Function #############################################################################
library(popbio) # for eigen.analysis()
n<-300 # number of cuts for meshpoints/discretization into matrix
############ integration limits - these limits span the range of sizes observed in the data set, and then some.
min.size<-min(MC$size,na.rm=T)
max.size<-max(MC$size,na.rm=T)+2
#boundary points (the edges of the cells defining the kernel)
b=min.size+c(0:n)*(max.size-min.size)/n
# mesh points= midpoints of the cells (could also use cumulative)
y=0.5*(b[1:n]+b[2:(n+1)])
# width of the cells
h=y[2]-y[1]
##########################################################discretization/build component kernels##################################
# the function outer() evaluates the kernel at all pairwise combinations of the two vectors y and y.
# P is the growth/suvival kernel.  Pi, Pu, Pm,and Pg are growth kernels for 4 growth fates (fission, fusion, and growth)
Kernel<-function(y,n,params){
#calculate the proportion of each size class that grows according to I,U,Gr functions
S=s.x(y,params=params) # survival
I=p.fiss.x(y,params=params)-p.fiss.x(y,params=params)*p.fuse.x(y,params=params) #fisser-only = I
U=(p.fuse.x(y,params=params)*p.fuseLG.x(y,params=params))  #fusion of U AND Ms:  include Ms in fusion growth
Gr=1-p.fiss.x(y,params=params)- p.fuse.x(y,params=params) + p.fiss.x(y,params=params)*p.fuse.x(y,params=params)
ES=p.es.x(y,params=params)
GS=h*outer(y,y,gs.yx,params=params)
GG=h*outer(y,y,gg.yx,params=params)
GI=h*outer(y,y,ig.yx,params=params)
GU=h*outer(y,y,ug.yx,params=params)
Ps=GS
for (i in 1:n) Ps[,i]=GS[,i]*S[i]*(Gr[i])*(ES)
Pg=GG
for (i in 1:n) Pg[,i]=GG[,i]*S[i]*(Gr[i])* (1-ES)
Pi=GI
for(i in 1:n) Pi[,i]=GI[,i]*S[i]*I[i]
Pu=GU
for(i in 1:n) Pu[,i]=GU[,i]*S[i]*U[i]
#C is the clonal offspring kernel
C=h*outer(y,y,c.yx,params=params)
#F is the fecundity/sexually reproduced offspring kernel
#F is currently using the fecundity constant calculated based on Bruno et al. 2011
F=h*outer(y,y,f.yx,params=params)
###############################################################IPM!###############################################################
#Full kernel with 3 growth functions.  One each for fission, fusion (including M), and growth
P = Pg+Pi+Pu+Ps
#####################################################################constant correction#######################################################
#which will multiply every column of the IPM by a constant sufficient to adjust values to those predicted for survival at that size
#For Pmatrix
nvals <- colSums(P, na.rm = TRUE)
loc0 <- which(nvals == 0, arr.ind = TRUE)
if (length(loc0) > 0) {
print("warnings - columns that sum to 0 or that have NAs - assuming survival is along the diagonal; plot your Pmatrix to check it")
P[, loc0] <- 0
P[cbind(loc0, loc0)] <- S
}
nvals <- colSums(P, na.rm = TRUE)
P<- t((t(P)/nvals) * S)*(1-p.fuse.x(y,params)*(1-p.fuseLG.x(y,params)))  # should be:  t((t(P)/nvals)*(S*p.smfuse)
#want to normalize to the survival and the prob of being a small fuser
#for F matrix
f<- f.y(y,params=params)
correction.here <- f/colSums(F)
F<- t(t(F) * correction.here)
#for Cmatrix
c<-c.y(y,params=params)
correction.here <- c/colSums(C)
C<- t(t(C) * correction.here)
K=P+C+F
return(K)
}
#################################MeganR Fixed Effect Utility Functions#############################################################################
## utility functions
#probability of surviving
s.x=function(x,params) {
u=exp(params[1,site]+params[2,site]*x)
return(u/(1+u))
}
#growth functions by fateIPM
gg.yx=function(xp,x,params) {
g<-dnorm(xp,params[3,site]+params[4,site]*x+params[5,site]*exp((-1)*params[6,site]*x),params[7,site])
}
#extreme shrinkage growth
gs.yx=function(xp,x,params) {
g<-dnorm(xp,params[8,site]+params[9,site]*x,params[10,site])
}
ig.yx=function(xp,x,params) {
g<-dnorm(xp,params[11,site]+params[12,site]*x,params[13,site])
}
ug.yx=function(xp,x,params) {
g<-dnorm(xp,params[14,site]+params[15,site]*x,params[16,site])
}
# probability of extreme shrinkage
p.es.x=function(x,params) {
u=exp(params[17,site])
return(u/(1+u))
}
# probability of fissing
p.fiss.x=function(x,params) {
u=exp(params[18,site]+params[19,site]*x)
return(u/(1+u))
}
# probability of fusion
p.fuse.x=function(x,params) {
u=exp(params[20,site]+params[21,site]*x)
return(u/(1+u))
}
#probability of large fusion
p.fuseLG.x=function(x,params) {
u=exp(params[22,site]+params[23,site]*x)
return(u/(1+u))
}
#Fission offspring using separate vglm pospoisson function for hi vs lo number of fission products
c.yx=function(xp,x,params) {
u1<-exp(params[24,site]+params[25,site]*x)
u2<-exp(params[26,site]+params[27,site]*x)
u3<-exp(params[28,site]+params[29,site]*x)
uall<-1+u1+u2+u3
p4<-1-u1/uall-u2/uall-u3/uall
nfiss<-u1/uall+u2/uall*2+u3/uall*3+p4*70/11#70/11 is weighted average of # of offspring over 4.
##return: prob of fission * 1-prob of lo number*number of fission products * prob that a fisser of size x prodcues a product of size xp
p.fiss.x(x,params)*nfiss*dunif(xp,min=-2.786705,max=x)#-2.786705 is slightly smaller than minimum size used in model.
}
# number of clones per adult for "constant correction" of clonal matrix (no size distribution of offspring)
c.y=function(x,params) {
u1<-exp(params[24,site]+params[25,site]*x)
u2<-exp(params[26,site]+params[27,site]*x)
u3<-exp(params[28,site]+params[29,site]*x)
uall<-1+u1+u2+u3
p4<-1-u1/uall-u2/uall-u3/uall
nfiss<-u1/uall+u2/uall*2+u3/uall*3+p4*70/11
u=p.fiss.x(x,params)*nfiss
return (u)
}
#recruitment = sexual offspring
f.yx=function(xp,x,params){
params[32,site]*x*dnorm(xp,params[30,site],params[31,site])
}
# recruits per adult for "constant correction" of fecundity matrix (no size distribution of offspring)
f.y=function(xp,params) {
params[32,site]*xp
}
###########################################################MeganR Fixed Effect Vital Rates and Parameters Matrix#############################################################################
library(nlme) # for gls()and gnls()
library(lme4) # for recruitment
#library(VGAM)#For vglmm function with zero truncated poisson
#library(MASS)
library(nnet)
nx<-10 # number of sites for this species
ncoef<-32 # number of coefficients
n<-300 # number of cuts for meshpoints/discretization into matrix
################################################################Vital Rate Functions###################################################################################
#survival regression
surv.reg.re0<-glmer(Psurv~size+(1|utrans),data=MC,family=binomial)
summary(surv.reg.re0)
surv.int.re0=c(fixed.effects(surv.reg.re0)[1]+random.effects(surv.reg.re0)[[1]][1:10,1])
surv.slope.re0=fixed.effects(surv.reg.re0)[2]
# growth regression
growth.reg.re.a0<-nlme(sizeNext~a+b*size+c*exp(-d*size),data=GONGS,fixed=a+b+c+d~1,random=c~1|utrans,start=list(fixed=c(1,1,1,1)),control=gnlsControl(nlsTol=0.1))
growth.int.a0<-fixed.effects(growth.reg.re.a0)[1]
growth.slope.a0<-fixed.effects(growth.reg.re.a0)[2]
growth.e1.a0<-c(fixed.effects(growth.reg.re.a0)[3]+random.effects(growth.reg.re.a0)[1:10,1])
growth.e2.a0<-fixed.effects(growth.reg.re.a0)[4]
growth.sd.a0<-summary(growth.reg.re.a0)$sigma
es.reg<-gls(sizeNext~size,data=GOES)
summary(es.reg)
es.int<-coefficients(es.reg)[1]
es.slope<-coefficients(es.reg)[2]
es.sd<-(summary(es.reg)$sigma)
fiss.full<-gls(sizeNext~size,data=fissonly)
fiss.int<-coefficients(fiss.full)[1]
fiss.slope<-coefficients(fiss.full)[2]
fiss.sd<-summary(fiss.full)$sigma
fuse.full<-gls(sizeNext~size,data=fuseonly)
summary(fuse.full)
fuse.int<-coefficients(fuse.full)[1]
fuse.slope<-coefficients(fuse.full)[2]
fuse.sd<-summary(fuse.full)$sigma
#probability of extreme shrinkage conditional on survival
Pes<-glm(PES~1,family=binomial,data=growthonly)
pes.int<-coefficients(Pes)
#probability of fission conditional on survival (for fission growth function and clonal matrix)
fiss.re0=glmer(Pfiss~size+(1|utrans),data=MC,family=binomial)
summary(fiss.re0)
Pfiss.int.re0=c(fixed.effects(fiss.re0)[1]+random.effects(fiss.re0)[[1]][1:10,1])
Pfiss.slope.re0=fixed.effects(fiss.re0)[2]
# probability of fusion conditional on survival(for fusion growth function)
fuse.re0<-glmer(Pfuse~size+(1|utrans),data=MC,family=binomial)
summary(fuse.re0)
Pfuse.int.re0=c(fixed.effects(fuse.re0)[1]+random.effects(fuse.re0)[[1]][1:10,1])
Pfuse.slope.re0=fixed.effects(fuse.re0)[2]
fuseLG.re0=glmer(PfuseLG~size+(1|utrans),data=MC,family=binomial)
summary(fuseLG.re0)
PfuseLG.int.re0=c(fixed.effects(fuseLG.re0)[1]+random.effects(fuseLG.re0)[[1]][1:10,1])
PfuseLG.slope.re0=fixed.effects(fuseLG.re0)[2]
#number of clones per fission event: 2 functions for data subset with hi (4-10) and lo (1-3) numfiss using zero truncated poisson
clonenum=multinom(fnumfiss~size,data=MCf)
summary(clonenum)
clonenum1.int=coefficients(clonenum)[1,1]
clonenum1.slope=coefficients(clonenum)[1,2]
clonenum2.int=coefficients(clonenum)[3,1]
clonenum2.slope=coefficients(clonenum)[3,2]
clonenum3.int=coefficients(clonenum)[2,1]
clonenum3.slope=coefficients(clonenum)[2,2]
##recruitment rate as in Bruno et al. 2011 page 130
#number of recruits per quad.  Includes all years not just the years including years excluded from growth due to 2 year change etc.
rcrt.lmeU.Y <- glmer(recruits~1+(1|utrans)+(1|year),family=poisson,data=MCr)
summary(rcrt.lmeU.Y)
recruit.int= c(fixef(rcrt.lmeU.Y)[1]+ranef(rcrt.lmeU.Y)[[1]][1:10,1])
##Recruitment rate using averages of observed recruits and colony density (not using lm just averaged by hand a while ago so data may have changed)
#recruit.int=0.0905897
##Tried different recruitment rates will think about more with sensitivity analyses
#recruit.int=0.01
#size distribution of recruits
rec.sizeU<-lme(sizeNext~1,random=~1|utrans,data=MCrs)
summary(rec.sizeU)
recruit.size.mean=c(fixef(rec.sizeU)[1]+ranef(rec.sizeU)[1:10,1])
recruit.size.sd=(summary(rec.sizeU)$sigma)
#recruit.size.mean=mean(MC$sizeNext[MC$fateIPM=="recruit"])
#recruit.size.sd=sd(MC$sizeNext[MC$fateIPM=="recruit"])
#number of colonies per quadIncludes all years not just the years including years excluded from growth due to 2 year change etc.
dens.lmeU.Y <- glmer(colnum~1+(1|utrans)+(1|year),family=poisson,data=MCd)
summary(dens.lmeU.Y)
dens.int=c(fixef(dens.lmeU.Y)[1]+ranef(dens.lmeU.Y)[[1]][1:10,1])
# Size distribution of colonies colonies present at time t (all but recruits and fissSM)
col.size<-lme(size~1,random=~1|utrans,data=MCds)
summary(col.size)
colsize.int=c(fixef(col.size)[1]+ranef(col.size)[1:10,1])
colsize.sd=(summary(col.size)$sigma)
r<-c(rep(0,nx))
for(i in 1:nx){
recruitdensity=exp(recruit.int[i])
colonydensity=exp(dens.int[i])
sfd= dnorm(y,colsize.int[i],colsize.sd)
r[i]<-recruitdensity/sum(sfd*y*colonydensity)
}
#make slots for parameters
params<-matrix(0, ncoef, nx)  #creates a matrix of zeros with ncoef rows and nx (num of sites) columns
params[1,]<-c(surv.int.re0)               #survival intercept by site
params[2,]<-rep(surv.slope.re0)           #survival slope wrt size, same across sites
params[3,]<-rep(growth.int.a0)             #growth linear intercept by site
params[4,]<-rep(growth.slope.a0)         #growth linear slope by site
params[5,]<-c(growth.e1.a0)            #growth exponential intercept (constant coefficient),same across sites
params[6,]<-rep(growth.e2.a0)            #growth exponential slope, same across sites
params[7,]<-rep(growth.sd.a0)            #growth standard deviation, same across sites
params[8,]<-rep(es.int)               #Extreme negative growth intercept, same across sites
params[9,]<-rep(es.slope)             #Extreme negative growth slope, same across sites
params[10,]<-rep(es.sd)               #Extreme negative growth standard deviation, same across sites
params[11,]<-rep(fiss.int)            #fiss growth intercept by site
params[12,]<-rep(fiss.slope)          #fiss growth slope by site
params[13,]<-rep(fiss.sd)             #fiss growth standard deviation, same across site
params[14,]<-rep(fuse.int)            #fuse growth intercept by site
params[15,]<-rep(fuse.slope)          #fuse growth slope, same across sites
params[16,]<-rep(fuse.sd)             #fuse growth standard deviation, same across sites
params[17,]<-rep(pes.int)             #probability of undergoing extreme negative growth, same across sites
params[18,]<-c(Pfiss.int.re0)             #Probability of fission intercept by site
params[19,]<-rep(Pfiss.slope.re0)           #Probability of fission slopeby site
params[20,]<-c(Pfuse.int.re0)             #Probability of fusion intercept by site
params[21,]<-rep(Pfuse.slope.re0)         #Probability of fusion slope, same across site
params[22,]<-c(PfuseLG.int.re0)           #Probability of being large fusion intercept given that you survived and fused by site
params[23,]<-rep(PfuseLG.slope.re0)       #probability of being a large fusion slope given that you survived and fused same across sites
params[24,]<-rep(clonenum1.int)      #clonenum intercept lo number of fission events, same across sites
params[25,]<-rep(clonenum1.slope)    #clonenum slope lo number of fission events, same across sites
params[26,]<-rep(clonenum2.int)      #clonenum intercept lo number of fission events, same across sites
params[27,]<-rep(clonenum2.slope)    #clonenum slope lo number of fission events, same across sites
params[28,]<-rep(clonenum3.int)      #clonenum intercept lo number of fission events, same across sites
params[29,]<-rep(clonenum3.slope)    #clonenum slope lo number of fission events, same across sites
params[30,]<-c(recruit.size.mean)     #mean size of recruitsby site
params[31,]<-rep(recruit.size.sd)     #sd size of recruits, same across sites
params[32,]<-c(r)                     #estimated number of recruits per colony by site (as in Bruno et al. 2011)
rownames(params)<-c("surv.int","surv.slope","growth.int","growth.slope","growth.e1","growth.e2","growth.sd","Pes","es.int","es.slope","es.sd","fiss.int","fiss.slope","fiss.sd","fuse.int","fuse.slope","fuse.sd","Pfiss.int","Pfiss.slope","Pfuse.int","Pfuse.slope","PfuseLG.int","PfuseLG.slope","clonenum1.int","clonenum1.slope","clonenum2.int","clonenum2.slope","clonenum3.int","clonenum3.slope","recruit.size.mean","recruit.size.sd","r")
#plot average curves for survival, growth, Pfiss/Pfuse/growth, # of fission offspring
par(mfrow=c(2,2))
par(oma=c(1,3,1,3))
par(mar=c(4,4,3,2))
#Growth
plot(GONGS$size,GONGS$sizeNext,pch=18,cex=0.5, xlim=c(-2,8),ylim=c(-2,8),xlab="Size t (log(Area)",ylab="Size t+1 (log(Area))",col=cl1[3])
points(fissonly$size,fissonly$sizeNext, pch=18, cex=0.5, col=cl1[6])
points(fuseonly$size,fuseonly$sizeNext, pch=18, cex=0.5, col=cl1[1])
points(GOES$size,GOES$sizeNext, pch=18, cex=0.5, col=cl1[4])
x0<-seq(from=-2.4,to=10.5,by=0.01)#Range of values for lines added to plots
lines(x0,fixed.effects(growth.reg.re.a0)[1]+fixed.effects(growth.reg.re.a0)[2]*x0+fixed.effects(growth.reg.re.a0)[3]*exp(-1*fixed.effects(growth.reg.re.a0)[4]*x0),col=cl1[3],lwd=2)
lines(x0,fiss.int+fiss.slope*x0,col=cl1[6],lwd=2)
lines(x0,fuse.int+fuse.slope*x0,col=cl1[1],lwd=2)
lines(x0,es.int+es.slope*x0,col=cl1[4],lwd=2)
legend("bottomright", legend = c("normal","fission","fusion","ES"), col = cl1[c(3,6,1,4)], lwd = 2, xjust = 1, bg = "white",bty="n")
mtext(letters[1],side=3,line=1,adj=0.01)
#Fate probability
plot(MC$size, MC$Pfiss,type="n",xlim=c(-2,8),xlab="Size t (log(Area))",ylab="Fate Probabilities")
pf<-exp(fixed.effects(fiss.re0)[1]+fixed.effects(fiss.re0)[2]*x0)
pfu<-exp(fixed.effects(fuse.re0)[1]+fixed.effects(fuse.re0)[2]*x0)
pful<-exp(fixed.effects(fuseLG.re0)[1]+fixed.effects(fuseLG.re0)[2]*x0)
pe<-exp(coefficients(Pes))
pe1<-(1-pf/(pf+1) - pfu/(pfu+1) + pf/(pf+1)*pfu/(pfu+1))*(pe/(pe+1))
pg<-(1-pf/(pf+1) - pfu/(pfu+1) + pf/(pf+1)*pfu/(pfu+1))*(1-pe/(pe+1))
lines(x0,pf/(pf+1),col=cl1[6],lwd=2)
lines(x0,pfu/(pfu+1)*pful/(pful+1),col=cl1[1],lwd=2)
lines(x0,pe1,col=cl1[4],lwd=2)
lines(x0,pg,col=cl1[3],lwd=2)
mtext(letters[2],side=3,line=1,adj=0.01)
#Survival
plot(MC$size,MC$Psurv,pch=18,cex=0.5,xlim=c(-2,8),xlab="Size t (log(Area))",ylab="Survival Probability")
u<-exp(fixed.effects(surv.reg.re0)[1]+surv.slope.re0*x0)
lines(x0,u/(u+1),lwd=2)
mtext(letters[3],side=3,line=1,adj=0.01)
# of fission products
plot(MCf$size,MCf$numfiss,pch=18,cex=0.5,xlim=c(-2,8),ylim=c(0,10),xlab="Size t (log(Area))",ylab="# of clonal offspring per fission event")
u1<-exp(clonenum1.int+clonenum1.slope*x0)
u2<-exp(clonenum2.int+clonenum2.slope*x0)
u3<-exp(clonenum3.int+clonenum3.slope*x0)
uall<-1+u1+u2+u3
p4<-1-u1/uall-u2/uall-u3/uall
nfiss<-u1/uall+u2/uall*2+u3/uall*3+p4*70/11#70/11 is weighted average of # of offspring over 4.
lines(x0,nfiss,lwd=2)
mtext(letters[4],side=3,line=1,adj=0.01)
cl1<-topo.colors(10)
#plot average curves for survival, growth, Pfiss/Pfuse/growth, # of fission offspring
par(mfrow=c(2,2))
par(oma=c(1,3,1,3))
par(mar=c(4,4,3,2))
#Growth
plot(GONGS$size,GONGS$sizeNext,pch=18,cex=0.5, xlim=c(-2,8),ylim=c(-2,8),xlab="Size t (log(Area)",ylab="Size t+1 (log(Area))",col=cl1[3])
points(fissonly$size,fissonly$sizeNext, pch=18, cex=0.5, col=cl1[6])
points(fuseonly$size,fuseonly$sizeNext, pch=18, cex=0.5, col=cl1[1])
points(GOES$size,GOES$sizeNext, pch=18, cex=0.5, col=cl1[4])
x0<-seq(from=-2.4,to=10.5,by=0.01)#Range of values for lines added to plots
lines(x0,fixed.effects(growth.reg.re.a0)[1]+fixed.effects(growth.reg.re.a0)[2]*x0+fixed.effects(growth.reg.re.a0)[3]*exp(-1*fixed.effects(growth.reg.re.a0)[4]*x0),col=cl1[3],lwd=2)
lines(x0,fiss.int+fiss.slope*x0,col=cl1[6],lwd=2)
lines(x0,fuse.int+fuse.slope*x0,col=cl1[1],lwd=2)
lines(x0,es.int+es.slope*x0,col=cl1[4],lwd=2)
legend("bottomright", legend = c("normal","fission","fusion","ES"), col = cl1[c(3,6,1,4)], lwd = 2, xjust = 1, bg = "white",bty="n")
mtext(letters[1],side=3,line=1,adj=0.01)
#Fate probability
plot(MC$size, MC$Pfiss,type="n",xlim=c(-2,8),xlab="Size t (log(Area))",ylab="Fate Probabilities")
pf<-exp(fixed.effects(fiss.re0)[1]+fixed.effects(fiss.re0)[2]*x0)
pfu<-exp(fixed.effects(fuse.re0)[1]+fixed.effects(fuse.re0)[2]*x0)
pful<-exp(fixed.effects(fuseLG.re0)[1]+fixed.effects(fuseLG.re0)[2]*x0)
pe<-exp(coefficients(Pes))
pe1<-(1-pf/(pf+1) - pfu/(pfu+1) + pf/(pf+1)*pfu/(pfu+1))*(pe/(pe+1))
pg<-(1-pf/(pf+1) - pfu/(pfu+1) + pf/(pf+1)*pfu/(pfu+1))*(1-pe/(pe+1))
lines(x0,pf/(pf+1),col=cl1[6],lwd=2)
lines(x0,pfu/(pfu+1)*pful/(pful+1),col=cl1[1],lwd=2)
lines(x0,pe1,col=cl1[4],lwd=2)
lines(x0,pg,col=cl1[3],lwd=2)
mtext(letters[2],side=3,line=1,adj=0.01)
#Survival
plot(MC$size,MC$Psurv,pch=18,cex=0.5,xlim=c(-2,8),xlab="Size t (log(Area))",ylab="Survival Probability")
u<-exp(fixed.effects(surv.reg.re0)[1]+surv.slope.re0*x0)
lines(x0,u/(u+1),lwd=2)
mtext(letters[3],side=3,line=1,adj=0.01)
# of fission products
plot(MCf$size,MCf$numfiss,pch=18,cex=0.5,xlim=c(-2,8),ylim=c(0,10),xlab="Size t (log(Area))",ylab="# of clonal offspring per fission event")
u1<-exp(clonenum1.int+clonenum1.slope*x0)
u2<-exp(clonenum2.int+clonenum2.slope*x0)
u3<-exp(clonenum3.int+clonenum3.slope*x0)
uall<-1+u1+u2+u3
p4<-1-u1/uall-u2/uall-u3/uall
nfiss<-u1/uall+u2/uall*2+u3/uall*3+p4*70/11#70/11 is weighted average of # of offspring over 4.
lines(x0,nfiss,lwd=2)
mtext(letters[4],side=3,line=1,adj=0.01)
